From ef072b2220ce6283228a1bbd520841f18258d914 Mon Sep 17 00:00:00 2001
From: Brecht Neyrinck <bnrn@psicontrol.com>
Date: Mon, 21 Mar 2016 11:07:08 +0100
Subject: [PATCH] video patch

---
 drivers/video/mxc/ldb.c          | 129 ++++++++++-----------------------------
 drivers/video/mxc/mipi_dsi.c     |  13 +++-
 drivers/video/mxc/mxc_dispdrv.h  |   4 +-
 drivers/video/mxc/mxc_hdmi.c     |   4 +-
 drivers/video/mxc/mxc_ipuv3_fb.c |   4 +-
 5 files changed, 48 insertions(+), 106 deletions(-)

diff --git a/drivers/video/mxc/ldb.c b/drivers/video/mxc/ldb.c
index 2c7d647..53caa89 100644
--- a/drivers/video/mxc/ldb.c
+++ b/drivers/video/mxc/ldb.c
@@ -112,7 +112,6 @@ struct ldb_data {
 	uint32_t *reg;
 	uint32_t *control_reg;
 	uint32_t *gpr3_reg;
-	uint32_t control_reg_data;
 	struct regulator *lvds_bg_reg;
 	int mode;
 	bool inited;
@@ -129,7 +128,6 @@ struct ldb_data {
 		uint32_t ch_mask;
 		uint32_t ch_val;
 	} setting[2];
-	struct notifier_block nb;
 };
 
 static int g_ldb_mode;
@@ -321,7 +319,7 @@ static int find_ldb_setting(struct ldb_data *ldb, struct fb_info *fbi)
 
 static int ldb_disp_setup(struct mxc_dispdrv_handle *disp, struct fb_info *fbi)
 {
-	uint32_t reg, val;
+	uint32_t reg ;
 	uint32_t pixel_clk, rounded_pixel_clk;
 	struct clk *ldb_clk_parent;
 	struct ldb_data *ldb = mxc_dispdrv_getdata(disp);
@@ -334,15 +332,12 @@ static int ldb_disp_setup(struct mxc_dispdrv_handle *disp, struct fb_info *fbi)
 
 	di = ldb->setting[setting_idx].di;
 
-	/* restore channel mode setting */
-	val = readl(ldb->control_reg);
-	val |= ldb->setting[setting_idx].ch_val;
-	writel(val, ldb->control_reg);
-	dev_dbg(&ldb->pdev->dev, "LDB setup, control reg:0x%x\n",
-			readl(ldb->control_reg));
-
 	/* vsync setup */
 	reg = readl(ldb->control_reg);
+ 
+  /* clear channel mode */
+	reg &= ~ldb->setting[setting_idx].ch_mask;
+
 	if (fbi->var.sync & FB_SYNC_VERT_HIGH_ACT) {
 		if (di == 0)
 			reg = (reg & ~LDB_DI0_VS_POL_MASK)
@@ -361,8 +356,6 @@ static int ldb_disp_setup(struct mxc_dispdrv_handle *disp, struct fb_info *fbi)
 	writel(reg, ldb->control_reg);
 
 	/* clk setup */
-	if (ldb->setting[setting_idx].clk_en)
-		 clk_disable_unprepare(ldb->setting[setting_idx].ldb_di_clk);
 	pixel_clk = (PICOS2KHZ(fbi->var.pixclock)) * 1000UL;
 	ldb_clk_parent = clk_get_parent(ldb->setting[setting_idx].ldb_di_clk);
 	if (IS_ERR(ldb_clk_parent)) {
@@ -393,75 +386,43 @@ static int ldb_disp_setup(struct mxc_dispdrv_handle *disp, struct fb_info *fbi)
 		return ret;
 	}
 
-	if (!ldb->setting[setting_idx].clk_en)
-		ldb->setting[setting_idx].clk_en = true;
-
 	return 0;
 }
 
-int ldb_fb_event(struct notifier_block *nb, unsigned long val, void *v)
+static int ldb_disp_enable(struct mxc_dispdrv_handle *disp,
+			   struct fb_info *fbi)
 {
-	struct ldb_data *ldb = container_of(nb, struct ldb_data, nb);
-	struct fb_event *event = v;
-	struct fb_info *fbi = event->info;
+	struct ldb_data *ldb = mxc_dispdrv_getdata(disp);
 	int index;
-	uint32_t data;
+	uint32_t reg;
 
 	index = find_ldb_setting(ldb, fbi);
 	if (index < 0)
-		return 0;
+		return index;
 
-	fbi->mode = (struct fb_videomode *)fb_match_mode(&fbi->var,
-			&fbi->modelist);
-
-	if (!fbi->mode) {
-		dev_warn(&ldb->pdev->dev,
-				"LDB: can not find mode for xres=%d, yres=%d\n",
-				fbi->var.xres, fbi->var.yres);
-		if (ldb->setting[index].clk_en) {
-			clk_disable(ldb->setting[index].ldb_di_clk);
-			ldb->setting[index].clk_en = false;
-			data = readl(ldb->control_reg);
-			data &= ~ldb->setting[index].ch_mask;
-			writel(data, ldb->control_reg);
-		}
-		return 0;
-	}
+	reg = readl(ldb->control_reg);
+	reg |= ldb->setting[index].ch_val;
+	writel(reg, ldb->control_reg);
 
-	switch (val) {
-	case FB_EVENT_BLANK:
-	{
-		if (*((int *)event->data) == FB_BLANK_UNBLANK) {
-			if (!ldb->setting[index].clk_en) {
-				clk_enable(ldb->setting[index].ldb_di_clk);
-				ldb->setting[index].clk_en = true;
-			}
-		} else {
-			if (ldb->setting[index].clk_en) {
-				clk_disable(ldb->setting[index].ldb_di_clk);
-				ldb->setting[index].clk_en = false;
-				data = readl(ldb->control_reg);
-				data &= ~ldb->setting[index].ch_mask;
-				writel(data, ldb->control_reg);
-				dev_dbg(&ldb->pdev->dev,
-					"LDB blank, control reg:0x%x\n",
-						readl(ldb->control_reg));
-			}
-		}
-		break;
-	}
-	case FB_EVENT_SUSPEND:
-		if (ldb->setting[index].clk_en) {
-			clk_disable(ldb->setting[index].ldb_di_clk);
-			ldb->setting[index].clk_en = false;
-		}
-		break;
-	default:
-		break;
-	}
 	return 0;
 }
 
+static void ldb_disp_disable(struct mxc_dispdrv_handle *disp,
+			     struct fb_info *fbi)
+{
+	struct ldb_data *ldb = mxc_dispdrv_getdata(disp);
+	int index;
+	uint32_t reg;
+
+	index = find_ldb_setting(ldb, fbi);
+	if (index < 0)
+		return;
+
+	reg = readl(ldb->control_reg);
+	reg &= ~ldb->setting[index].ch_mask;
+	writel(reg, ldb->control_reg);
+}
+
 #define LVDS_MUX_CTL_WIDTH	2
 #define LVDS_MUX_CTL_MASK	3
 #define LVDS0_MUX_CTL_OFFS	6
@@ -845,8 +806,6 @@ static int ldb_post_disp_init(struct mxc_dispdrv_handle *disp,
 	int ret = 0;
 
 	if (!ldb->inited) {
-		ldb->nb.notifier_call = ldb_fb_event;
-		fb_register_client(&ldb->nb);
 	}
 
 	ret = clk_set_parent(ldb->setting[setting_idx].di_clk,
@@ -897,7 +856,6 @@ static void ldb_disp_deinit(struct mxc_dispdrv_handle *disp)
 		clk_put(ldb->setting[i].div_sel_clk);
 	}
 
-	fb_unregister_client(&ldb->nb);
 }
 
 static struct mxc_dispdrv_driver ldb_drv = {
@@ -906,33 +864,10 @@ static struct mxc_dispdrv_driver ldb_drv = {
 	.post_init = ldb_post_disp_init,
 	.deinit	= ldb_disp_deinit,
 	.setup = ldb_disp_setup,
+ 	.enable = ldb_disp_enable,
+	.disable = ldb_disp_disable,
 };
 
-static int ldb_suspend(struct platform_device *pdev, pm_message_t state)
-{
-	struct ldb_data *ldb = dev_get_drvdata(&pdev->dev);
-	uint32_t	data;
-
-	if (!ldb->inited)
-		return 0;
-	data = readl(ldb->control_reg);
-	ldb->control_reg_data = data;
-	data &= ~(LDB_CH0_MODE_MASK | LDB_CH1_MODE_MASK);
-	writel(data, ldb->control_reg);
-
-	return 0;
-}
-
-static int ldb_resume(struct platform_device *pdev)
-{
-	struct ldb_data *ldb = dev_get_drvdata(&pdev->dev);
-
-	if (!ldb->inited)
-		return 0;
-	writel(ldb->control_reg_data, ldb->control_reg);
-
-	return 0;
-}
 
 static struct platform_device_id imx_ldb_devtype[] = {
 	{
@@ -1014,8 +949,6 @@ static struct platform_driver mxcldb_driver = {
 	},
 	.probe = ldb_probe,
 	.remove = ldb_remove,
-	.suspend = ldb_suspend,
-	.resume = ldb_resume,
 };
 
 static int __init ldb_init(void)
diff --git a/drivers/video/mxc/mipi_dsi.c b/drivers/video/mxc/mipi_dsi.c
index 8517d2f..110b1fa 100644
--- a/drivers/video/mxc/mipi_dsi.c
+++ b/drivers/video/mxc/mipi_dsi.c
@@ -623,7 +623,7 @@ static int mipi_dsi_lcd_init(struct mipi_dsi_info *mipi_dsi,
 	return 0;
 }
 
-int mipi_dsi_enable(struct mxc_dispdrv_handle *disp)
+static int mipi_dsi_enable(struct mxc_dispdrv_handle *disp, struct fb_info *fbi)
 {
 	int err;
 	struct mipi_dsi_info *mipi_dsi = mxc_dispdrv_getdata(disp);
@@ -653,6 +653,15 @@ int mipi_dsi_enable(struct mxc_dispdrv_handle *disp)
 	return 0;
 }
 
+static void mipi_dsi_disable(struct mxc_dispdrv_handle *disp,
+			     struct fb_info *fbi)
+{
+	struct mipi_dsi_info *mipi_dsi = mxc_dispdrv_getdata(disp);
+
+	mipi_dsi_power_off(mipi_dsi->disp_mipi);
+}
+
+
 static int mipi_dsi_disp_init(struct mxc_dispdrv_handle *disp,
 	struct mxc_dispdrv_setting *setting)
 {
@@ -695,7 +704,7 @@ static struct mxc_dispdrv_driver mipi_dsi_drv = {
 	.init	= mipi_dsi_disp_init,
 	.deinit	= mipi_dsi_disp_deinit,
 	.enable	= mipi_dsi_enable,
-	.disable = mipi_dsi_power_off,
+	.disable = mipi_dsi_disable,
 };
 
 static int imx6q_mipi_dsi_get_mux(int dev_id, int disp_id)
diff --git a/drivers/video/mxc/mxc_dispdrv.h b/drivers/video/mxc/mxc_dispdrv.h
index 127fd08..f57036f 100644
--- a/drivers/video/mxc/mxc_dispdrv.h
+++ b/drivers/video/mxc/mxc_dispdrv.h
@@ -37,9 +37,9 @@ struct mxc_dispdrv_driver {
 	int (*post_init) (struct mxc_dispdrv_handle *, int dev_id, int disp_id);
 	void (*deinit) (struct mxc_dispdrv_handle *);
 	/* display driver enable function for extension */
-	int (*enable) (struct mxc_dispdrv_handle *);
+	int (*enable) (struct mxc_dispdrv_handle *, struct fb_info *);
 	/* display driver disable function, called at early part of fb_blank */
-	void (*disable) (struct mxc_dispdrv_handle *);
+	void (*disable) (struct mxc_dispdrv_handle *, struct fb_info *);
 	/* display driver setup function, called at early part of fb_set_par */
 	int (*setup) (struct mxc_dispdrv_handle *, struct fb_info *fbi);
 };
diff --git a/drivers/video/mxc/mxc_hdmi.c b/drivers/video/mxc/mxc_hdmi.c
index e510025..6f51e22 100644
--- a/drivers/video/mxc/mxc_hdmi.c
+++ b/drivers/video/mxc/mxc_hdmi.c
@@ -1947,14 +1947,14 @@ static void mxc_hdmi_cable_connected(struct mxc_hdmi *hdmi)
 	dev_dbg(&hdmi->pdev->dev, "%s exit\n", __func__);
 }
 
-static int mxc_hdmi_power_on(struct mxc_dispdrv_handle *disp)
+static int mxc_hdmi_power_on(struct mxc_dispdrv_handle *disp,  struct fb_info *fbi)
 {
 	struct mxc_hdmi *hdmi = mxc_dispdrv_getdata(disp);
 	mxc_hdmi_phy_init(hdmi);
 	return 0;
 }
 
-static void mxc_hdmi_power_off(struct mxc_dispdrv_handle *disp)
+static void mxc_hdmi_power_off(struct mxc_dispdrv_handle *disp,  struct fb_info *fbi)
 {
 	struct mxc_hdmi *hdmi = mxc_dispdrv_getdata(disp);
 	mxc_hdmi_phy_disable(hdmi);
diff --git a/drivers/video/mxc/mxc_ipuv3_fb.c b/drivers/video/mxc/mxc_ipuv3_fb.c
index 3cf386f..503ecf3 100644
--- a/drivers/video/mxc/mxc_ipuv3_fb.c
+++ b/drivers/video/mxc/mxc_ipuv3_fb.c
@@ -655,7 +655,7 @@ static int mxcfb_set_par(struct fb_info *fbi)
 		ipu_enable_channel(mxc_fbi_fg->ipu, mxc_fbi_fg->ipu_ch);
 
 	if (mxc_fbi->dispdrv && mxc_fbi->dispdrv->drv->enable) {
-		retval = mxc_fbi->dispdrv->drv->enable(mxc_fbi->dispdrv);
+		retval = mxc_fbi->dispdrv->drv->enable(mxc_fbi->dispdrv, fbi);
 		if (retval < 0) {
 			dev_err(fbi->device, "enable error, dispdrv:%s.\n",
 					mxc_fbi->dispdrv->drv->name);
@@ -1381,7 +1381,7 @@ static int mxcfb_blank(int blank, struct fb_info *info)
 	case FB_BLANK_HSYNC_SUSPEND:
 	case FB_BLANK_NORMAL:
 		if (mxc_fbi->dispdrv && mxc_fbi->dispdrv->drv->disable)
-			mxc_fbi->dispdrv->drv->disable(mxc_fbi->dispdrv);
+			mxc_fbi->dispdrv->drv->disable(mxc_fbi->dispdrv, info);
 		ipu_disable_channel(mxc_fbi->ipu, mxc_fbi->ipu_ch, true);
 		if (mxc_fbi->ipu_di >= 0)
 			ipu_uninit_sync_panel(mxc_fbi->ipu, mxc_fbi->ipu_di);
-- 
1.8.2.3

